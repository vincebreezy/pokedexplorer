{"ast":null,"code":"var _jsxFileName = \"/home/andrewc/pokedexplorer/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { EvolutionList, StatsList } from './Components/ArticleList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [evolutions, setEvolutions] = useState([]);\n  const [stats, setStats] = useState([]);\n\n  // Modify the current state by setting the new data to\n  // the response from the backend\n  useEffect(() => {\n    fetch('http://localhost:5000/evolutions', {\n      'methods': 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(response => setEvolutions(response)).catch(error => console.log(error));\n    fetch('http://localhost:5000/stats', {\n      'methods': 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(response => setStats(response)).catch(error => console.log(error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App container m-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Connecting a React Frontend to a Flask Backend.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(EvolutionList, {\n      evolutions: evolutions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatsList, {\n      stats: stats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pCV1Gk1QAtYSM9Xg7SaHva2tgMI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","EvolutionList","StatsList","jsxDEV","_jsxDEV","App","_s","evolutions","setEvolutions","stats","setStats","fetch","headers","then","response","json","catch","error","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/andrewc/pokedexplorer/frontend/src/App.js"],"sourcesContent":["import { useState,useEffect } from 'react'\nimport './App.css';\nimport { EvolutionList, StatsList } from './Components/ArticleList'\n\nfunction App() {\n  const [evolutions, setEvolutions] = useState([]);\n  const [stats, setStats] = useState([]);\n\n  // Modify the current state by setting the new data to\n  // the response from the backend\n  useEffect(()=>{\n    fetch('http://localhost:5000/evolutions',{\n      'methods':'GET',\n      headers : {\n        'Content-Type':'application/json'\n      }\n    })\n    .then(response => response.json())\n    .then(response => setEvolutions(response))\n    .catch(error => console.log(error))\n\n    fetch('http://localhost:5000/stats',{\n      'methods':'GET',\n      headers : {\n        'Content-Type':'application/json'\n      }\n    })\n    .then(response => response.json())\n    .then(response => setStats(response))\n    .catch(error => console.log(error))\n\n  },[])\n\n  return (\n    <div className=\"App container m-4\">\n    <div className=\"row\">\n      <div className=\"text-center\">\n      <h1>Connecting a React Frontend to a Flask Backend.</h1>\n      </div>\n    </div>\n\n      <EvolutionList evolutions={evolutions} />\n      <StatsList stats={stats} />\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,OAAO,WAAW;AAClB,SAASC,aAAa,EAAEC,SAAS,QAAQ,0BAA0B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA;EACAC,SAAS,CAAC,MAAI;IACZW,KAAK,CAAC,kCAAkC,EAAC;MACvC,SAAS,EAAC,KAAK;MACfC,OAAO,EAAG;QACR,cAAc,EAAC;MACjB;IACF,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACC,QAAQ,IAAIN,aAAa,CAACM,QAAQ,CAAC,CAAC,CACzCE,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IAEnCN,KAAK,CAAC,6BAA6B,EAAC;MAClC,SAAS,EAAC,KAAK;MACfC,OAAO,EAAG;QACR,cAAc,EAAC;MACjB;IACF,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACC,QAAQ,IAAIJ,QAAQ,CAACI,QAAQ,CAAC,CAAC,CACpCE,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAErC,CAAC,EAAC,EAAE,CAAC;EAEL,oBACEb,OAAA;IAAKgB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAClCjB,OAAA;MAAKgB,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClBjB,OAAA;QAAKgB,SAAS,EAAC,aAAa;QAAAC,QAAA,eAC5BjB,OAAA;UAAAiB,QAAA,EAAI;QAA+C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEJrB,OAAA,CAACH,aAAa;MAACM,UAAU,EAAEA;IAAW;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzCrB,OAAA,CAACF,SAAS;MAACO,KAAK,EAAEA;IAAM;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAExB,CAAC;AAEV;AAACnB,EAAA,CA1CQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}